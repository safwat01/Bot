import telebot
from telebot import types
import sqlite3
import os
import time

BOT_TOKEN = os.getenv("BOT_TOKEN")  # Railway Variables ржерзЗржХрзЗ ржирзЗржмрзЗ
bot = telebot.TeleBot(BOT_TOKEN)

# тЬЕ Admin User ID
ADMIN_ID = 6551628383
REFERRAL_BONUS = 100

# тЬЕ SQLite DB setup
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()

# ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS orders (
    order_id TEXT PRIMARY KEY,
    user_id INTEGER,
    order_type TEXT,
    order_link TEXT,
    order_quantity INTEGER,
    order_time TEXT
)
""")

conn.commit()

# ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпрзЛржЧ ржХрж░рж╛
def add_balance(user_id, amount):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)", (user_id,))
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()

# ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЪрзЗржХ ржХрж░рж╛
def get_balance(user_id):
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return row[0] if row else 0

# ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХрж╛ржЯрж╛рж░ ржлрж╛ржВрж╢ржи
def deduct_balance(user_id, amount):
    bal = get_balance(user_id)
    if bal >= amount:
        cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        return True
    return False

# ржЕрж░рзНржбрж╛рж░ рж╕рзЗржн ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
def save_order(order_id, user_id, order_type, order_link, order_quantity, order_time):
    cursor.execute("""
    INSERT INTO orders (order_id, user_id, order_type, order_link, order_quantity, order_time)
    VALUES (?, ?, ?, ?, ?, ?)
    """, (order_id, user_id, order_type, order_link, order_quantity, order_time))
    conn.commit()

# ржЕрж░рзНржбрж╛рж░ ржЖржЗржбрж┐ ржЬрзЗржирж╛рж░рзЗржЯрж░
def generate_order_id():
    return str(int(time.time()))

# ржЕрж░рзНржбрж╛рж░ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
def process_order(user_id, order_type, link, quantity, price_per_unit):
    total_cost = quantity * price_per_unit
    if deduct_balance(user_id, total_cost):
        order_id = generate_order_id()
        order_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

        # ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ рж╕рзЗржн ржХрж░рж╛
        save_order(order_id, user_id, order_type, link, quantity, order_time)

        # ржЗржЙржЬрж╛рж░рзЗрж░ ржХрж╛ржЫрзЗ ржорзЗрж╕рзЗржЬ
        bot.send_message(user_id, f"тЬЕ ржЕрж░рзНржбрж╛рж░ ржирж┐рж╢рзНржЪрж┐ржд рж╣рзЯрзЗржЫрзЗ!\n\n"
                                  f"Order ID: {order_id}\n"
                                  f"Order Type: {order_type}\n"
                                  f"Order Link: {link}\n"
                                  f"Order Quantity: {quantity}\n"
                                  f"Order Time: {order_time}")

        # ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржорзЗрж╕рзЗржЬ
        bot.send_message(ADMIN_ID, f"## ржирждрзБржи ржЕрж░рзНржбрж╛рж░ ##\n\n"
                                   f"User ID: {user_id}\n"
                                   f"Order ID: {order_id}\n"
                                   f"Order Type: {order_type}\n"
                                   f"Order Link: {link}\n"
                                   f"Order Quantity: {quantity}\n"
                                   f"Order Time: {order_time}")
    else:
        bot.send_message(user_id, "тЭМ ржЖржкржирж╛рж░ ржкрж░рзНржпрж╛ржкрзНржд ржХрзЯрзЗржи ржирзЗржЗ!")

# ржЕрж░рзНржбрж╛рж░ ржбрж╛ржЯрж╛ ржЯрзЗржорзНржкрзЛрж░рж╛рж░рж┐ рж╕рзНржЯрзЛрж░рзЗржЬ
order_data = {}

# ржЕрж░рзНржбрж╛рж░ рж╢рзБрж░рзБ (Views, Reactions, Subscriber)
@bot.message_handler(func=lambda msg: msg.text in ["ЁЯУИ Views", "тЭдя╕П Reactions", "ЁЯСе Subscriber"])
def order_start(message):
    user_id = message.from_user.id
    order_type = message.text
    order_data[user_id] = {"type": order_type}
    bot.send_message(user_id, "ЁЯФЧ ржЕрж░рзНржбрж╛рж░рзЗрж░ рж▓рж┐ржВржХ ржжрж┐ржи:")

# рж▓рж┐ржВржХ ржЗржиржкрзБржЯ ржирзЗржУрзЯрж╛
@bot.message_handler(func=lambda msg: msg.from_user.id in order_data and "link" not in order_data[msg.from_user.id])
def get_link(message):
    user_id = message.from_user.id
    order_data[user_id]["link"] = message.text
    bot.send_message(user_id, "ЁЯУМ ржХржд рж╕ржВржЦрзНржпржХ ржЕрж░рзНржбрж╛рж░ ржЪрж╛ржи рждрж╛ рж▓рж┐ржЦрзБржи:")

# ржХрзЛрзЯрж╛ржирзНржЯрж┐ржЯрж┐ ржЗржиржкрзБржЯ ржирзЗржУрзЯрж╛ ржПржмржВ ржЕрж░рзНржбрж╛рж░ ржкрзНрж░рж╕рзЗрж╕
@bot.message_handler(func=lambda msg: msg.from_user.id in order_data and "link" in order_data[msg.from_user.id])
def get_quantity(message):
    user_id = message.from_user.id
    try:
        quantity = int(message.text)
        order_type = order_data[user_id]["type"]
        link = order_data[user_id]["link"]

        price_per_unit = 1 if order_type == "ЁЯУИ Views" else 3 if order_type == "тЭдя╕П Reactions" else 5
        process_order(user_id, order_type, link, quantity, price_per_unit)

        del order_data[user_id]
    except:
        bot.send_message(user_id, "тЪая╕П рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")

# Start ржХржорж╛ржирзНржб (Referral рж╕рж╛ржкрзЛрж░рзНржЯ)
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) > 1:
        ref_id = args[1]
        if str(user_id) != ref_id:
            if get_balance(user_id) == 0:
                add_balance(user_id, 0)
                try:
                    ref_id_int = int(ref_id)
                    add_balance(ref_id_int, REFERRAL_BONUS)
                    bot.send_message(ref_id_int, f"ЁЯОЙ ржЖржкржирж┐ ржкрзЗрзЯрзЗржЫрзЗржи {REFERRAL_BONUS} ржХрзЯрзЗржи рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕!")
                except:
                    pass
            bot.send_message(user_id, "ЁЯОЙ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб рж╕рзНржмрзАржХрж╛рж░ рж╣рзЯрзЗржЫрзЗ, рж╕рзНржмрж╛ржЧрждржо!")
        else:
            bot.send_message(user_id, "тЪая╕П ржЖржкржирж┐ ржирж┐ржЬрзЗржХрзЗ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ржирж╛ред")
    else:
        if get_balance(user_id) == 0:
            add_balance(user_id, 0)

    # ржорзЗржирзБ ржмрзЛрждрж╛ржо
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("ЁЯУИ Views"), types.KeyboardButton("тЭдя╕П Reactions"))
    markup.add(types.KeyboardButton("ЁЯСе Subscriber"), types.KeyboardButton("ЁЯТ░ My Balance"))
    markup.add(types.KeyboardButton("ЁЯЖШ Support"), types.KeyboardButton("ЁЯУд Referral"))
    markup.add(types.KeyboardButton("ЁЯТ╕ Transfer"), types.KeyboardButton("ЁЯТ│ Buy Coins"))
    bot.send_message(user_id, "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи:", reply_markup=markup)

# Admin: Balance Add
@bot.message_handler(commands=['addbalance'])
def add_balance_command(message):
    if message.from_user.id == ADMIN_ID:
        try:
            _, target_id, amount = message.text.split()
            target_id = int(target_id)
            amount = int(amount)
            add_balance(target_id, amount)
            bot.send_message(message.chat.id, f"тЬЕ {target_id} ржХрзЗ {amount} ржХрзЯрзЗржи ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
            bot.send_message(target_id, f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ {amount} ржХрзЯрзЗржи ржЕрзНржпрж╛ржб ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ (Admin ржжрзНржмрж╛рж░рж╛)ред")
        except:
            bot.send_message(message.chat.id, "тЪая╕П ржмрзНржпржмрж╣рж╛рж░: /addbalance <user_id> <amount>")
    else:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж┐ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")

# ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрж╛ржирзЛ
@bot.message_handler(func=lambda m: m.text == "ЁЯТ░ My Balance")
def balance(message):
    bal = get_balance(message.from_user.id)
    bot.send_message(message.chat.id, f"ЁЯЖФ UserID: `{message.from_user.id}`\nЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {bal} Coins", parse_mode="Markdown")

# Support ржорзЗрж╕рзЗржЬ
@bot.message_handler(func=lambda m: m.text == "ЁЯЖШ Support")
def support(message):
    bot.send_message(message.chat.id, "ЁЯЖШ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: @safwat01")

# Referral рж▓рж┐ржВржХ
@bot.message_handler(func=lambda m: m.text == "ЁЯУд Referral")
def referral(message):
    bot_username = "tgsbs_RoBot"
    user_id = message.from_user.id
    link = f"https://t.me/{bot_username}?start={user_id}"
    bot.send_message(message.chat.id, f"ЁЯУд рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\n{link}\n\nржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗрж▓ ржП ржкрж╛ржмрзЗржи {REFERRAL_BONUS} ржХрзЯрзЗржиред")

# Transfer
@bot.message_handler(func=lambda m: m.text == "ЁЯТ╕ Transfer")
def transfer(message):
    bot.send_message(message.chat.id, "ЁЯТ╕ ржХрзЯрзЗржи ржкрж╛ржарж╛рждрзЗ:\n`/transfer <user_id> <amount>`", parse_mode="Markdown")

@bot.message_handler(commands=['transfer'])
def transfer_command(message):
    try:
        _, target_id, amount = message.text.split()
        sender_id = message.from_user.id
        target_id = int(target_id)
        amount = int(amount)
        if sender_id == target_id:
            bot.send_message(sender_id, "тЪая╕П ржирж┐ржЬрзЗржХрзЗ ржХрзЯрзЗржи ржкрж╛ржарж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛ред")
            return
        if deduct_balance(sender_id, amount):
            add_balance(target_id, amount)
            bot.send_message(sender_id, f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ {target_id} ржХрзЗ {amount} ржХрзЯрзЗржи ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
            bot.send_message(target_id, f"ЁЯТ░ ржЖржкржирж┐ {sender_id} ржерзЗржХрзЗ {amount} ржХрзЯрзЗржи ржкрзЗрзЯрзЗржЫрзЗржиред")
        else:
            bot.send_message(sender_id, "тЭМ ржкрж░рзНржпрж╛ржкрзНржд ржХрзЯрзЗржи ржирзЗржЗред")
    except:
        bot.send_message(message.chat.id, "тЪая╕П ржмрзНржпржмрж╣рж╛рж░: /transfer <user_id> <amount>")

# Buy Coins
@bot.message_handler(func=lambda m: m.text == "ЁЯТ│ Buy Coins")
def buy_coins(message):
    bot.send_message(message.chat.id, "ЁЯТ│ ржХрзЯрзЗржи ржХрзЗржирж╛рж░ ржЬржирзНржп /buy рж▓рж┐ржЦрзБржи ржЕржержмрж╛ рж╕рж╛ржкрзЛрж░рзНржЯрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред")

# Admin ржХржорж╛ржирзНржб: рж╕ржм ржЕрж░рзНржбрж╛рж░ ржжрзЗржЦрж╛ржирзЛ
@bot.message_handler(commands=['orders'])
def show_orders(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж┐ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    cursor.execute("SELECT * FROM orders ORDER BY order_time DESC")
    orders = cursor.fetchall()
    if not orders:
        bot.send_message(message.chat.id, "ржХрзЛржирзЛ ржЕрж░рзНржбрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
        return

    text = "ЁЯУЛ рж╕ржХрж▓ ржЕрж░рзНржбрж╛рж░:\n\n"
    for order in orders:
        order_id, user_id, order_type, order_link, order_quantity, order_time = order
        text += (f"Order ID: {order_id}\nUser ID: {user_id}\nType: {order_type}\n"
                 f"Link: {order_link}\nQuantity: {order_quantity}\nTime: {order_time}\n\n")
        if len(text) > 3500:  # Telegram message limit workaround
            bot.send_message(message.chat.id, text)
            text = ""
    if text:
        bot.send_message(message.chat.id, text)

# Fallback
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.send_message(message.chat.id, "тЪая╕П ржорзЗржирзБ ржерзЗржХрзЗ ржПржХржЯрж┐ ржмрзИржз ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред")

print("ЁЯдЦ Bot is running...")
bot.polling()
